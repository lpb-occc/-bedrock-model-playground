from model_selector import ModelChoices


def orchestrator(question, model_id):
    """
    Orchestrates the selection and execution of a specific model method based on the given model_id.

    Args:
        question (str): The question input from the user.
        model_id (str): The model identifier for selecting the model method.

    Returns:
        The result obtained from executing the selected model method, the response generated by the LLM of choice.
    """
    # Instantiate the ModelChoices class
    model = ModelChoices()
    # Check if 'anthropic' is in the model_id string
    if 'anthropic' in model_id:
        # If true, call the 'anthropic' method of the ModelChoices class with model_id and question as arguments
        result = model.anthropic(model_id, question)
        # Return the result obtained from the 'anthropic' method, and specific Anthropic Model
        return result
    # Check if 'meta' is in the model_id string
    elif 'meta' in model_id:
        # If true, call the 'meta' method of the ModelChoices class with model_id and question as arguments
        result = model.meta(model_id, question)
        # Return the result obtained from the 'meta' method, and specific Meta Model
        return result
    # Check if 'mistral' is in the model_id string
    elif 'mistral' in model_id:
        # If true, call the 'mistral' method of the ModelChoices class with model_id and question as arguments
        result = model.mistral(model_id, question)
        # Return the result obtained from the 'mistral' method, and specific Mistral Model
        return result
    # Check if 'cohere' is in the model_id string
    elif 'cohere' in model_id:
        # If true, call the 'cohere' method of the ModelChoices class with model_id and question as arguments
        result = model.cohere(model_id, question)
        # Return the result obtained from the 'cohere' method, and specific Cohere Model
        return result
    # Check if 'amazon' is in the model_id string
    elif 'amazon' in model_id:
        # If true, call the 'amazon' method of the ModelChoices class with model_id and question as arguments
        result = model.amazon(model_id, question)
        # Return the result obtained from the 'amazon' method, and specific Amazon Model
        return result
    # Check if 'ai21' is in the model_id string
    elif 'ai21' in model_id:
        # If true, call the 'AI21' method of the ModelChoices class with model_id and question as arguments
        result = model.AI21(model_id, question)
        # Return the result obtained from the 'AI21' method, and specific AI21 Model
        return result
